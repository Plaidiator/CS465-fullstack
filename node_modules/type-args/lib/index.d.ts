interface BooleanOptionRule {
    alias?: string;
    desc: string;
    type: 'boolean';
    default?: boolean;
}
interface StringOptionRule {
    alias?: string;
    desc: string;
    type: 'string';
    default?: string;
}
interface NumberOptionRule {
    alias?: string;
    desc: string;
    type: 'number';
    default?: number;
}
interface StringArrayOptionRule {
    alias?: string;
    desc: string;
    type: 'string[]';
    default?: string[];
}
interface NumberArrayOptionRule {
    alias?: string;
    desc: string;
    type: 'number[]';
    default?: number[];
}
declare type SOptionRule = BooleanOptionRule | StringOptionRule | NumberOptionRule;
declare type MOptionRule = StringArrayOptionRule | NumberArrayOptionRule;
export declare type OptionRule = SOptionRule | MOptionRule;
export interface OptionRules {
    [key: string]: OptionRule;
}
export interface Options {
    [key: string]: boolean | number | string | number[] | string[];
}
export declare function parse(argv?: string[], rules?: OptionRules, ...bases: Options[]): [Options, string[], string[]];
export {};
